/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import com.android.builder.BuilderConstants

apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.davide-maestroni'
version = '1.0'
archivesBaseName = project.parent.name

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 100
        versionName version

        testPackageName "com.bmd.android.collection.test"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:+'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile 'com.squareup:fest-android:1.0.7'
}

android.libraryVariants.all { variant ->

    def buildTypeName = variant.buildType.name

    if (buildTypeName.equals(BuilderConstants.DEBUG)) {

        // Skip debug builds.
        return;
    }

    def variantName = variant.name.capitalize()

    task("javadoc${variantName}", type: Javadoc) {
        description "Generates Javadoc from the ${variantName} build"
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        title = "${archivesBaseName} ${version}"
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        options.linksOffline("http://developer.android.com/reference/", "${android.plugin.sdkDirectory}/docs/reference/")
        options.overview("${project.name}/docs/overview.html")
        options.windowTitle("Javadoc - ${archivesBaseName}")
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }

    artifacts {

        archives task("sourcesJar${variantName}", type: Jar) {
            description "Generates sources Jar from the ${variantName} build"
            classifier = 'sources'
            from variant.sourceSets.allSource
        }

        archives task("javadocJar${variantName}", type: Jar, dependsOn: tasks["javadoc${variantName}"]) {
            description "Generates Javadoc Jar from the ${variantName} build"
            classifier = 'javadoc'
            from 'build/docs/javadoc'
        }

        archives task("jar${variantName}", type: Jar) {
            dependsOn variant.javaCompile
            description "Generates Jar from the ${variantName} build"
            from variant.javaCompile.destinationDir
            exclude '**/BuildConfig.class'
            exclude '**/R*.class'
        }
    }
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def localRepoUrl = mavenLocal().url.toString()

            if (file(localRepoUrl).exists()) {

                // Upload the artifacts to the local repository
                repository(url: localRepoUrl)
            }

            if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }

            pom.project {
                name = archivesBaseName
                packaging = 'jar'
                description = 'Easily iterate through Android sparse collections'
                url = 'http://davide-maestroni.github.io/robo-fashion/'

                scm {
                    url = 'git@github.com:davide-maestroni/robo-fashion.git'
                    connection = 'scm:git:git@github.com:davide-maestroni/robo-fashion.git'
                    developerConnection = 'scm:git:git@github.com:davide-maestroni/robo-fashion.git'
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'davide-maestroni'
                        name = 'Davide Maestroni'
                    }
                }
            }
        }
    }
}
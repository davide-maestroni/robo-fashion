{"name":"Robo-fashion","tagline":"Easy iteration and manipulation of Android sparse collections","body":"#robo-fashion\r\n\r\nThis library employs builder and fluent design patterns to enable easy iteration and manipulation of Android sparse collections.\r\n\r\n##Overview\r\n\r\nThe Android platform introduced a few collection classes based on the sparse array implementation. Although they bring improved performances and optimized memory usage to the classic Java collections world, they sometimes become awkward to use when implementing the most basic pieces of code. For example, good old iteration is not supported, so that, while all Java developers are by now used to the short and elegant syntax:\r\n\r\n```java\r\nfor (final Entry<Integer,MyClass> entry : map.entrySet()) {\r\n\r\n  doSomethingWithKey(entry.getKey());\r\n  doSomethingWithValue(entry.getValue());\r\n}\r\n```\r\n\r\nwhen employing Android sparse collections, you quickly end up in rewriting one time too often the same ugly code:\r\n\r\n```java\r\nfinal int size = collection.size();\r\n\r\nfor (int i = 0; i < size; ++i) {\r\n\r\n  doSomethingWithKey(collection.keyAt(i));\r\n  doSomethingWithValue(collection.valueAt(i));\r\n}\r\n```\r\n\r\nThe autocomplete feature of most Java or Android IDEs is not of much help here...\r\n\r\nThe purpose of this library is to provide an easy way to iterate through the elements of the Android sparse collections and manipulate them in the while.\r\n\r\n##Version\r\n\r\n1.0\r\n\r\n##License\r\n\r\n[The Apache Software License, Version 2.0][1]\r\n\r\n**It's open! Feel free to contribute!!**\r\n\r\n[1]:http://www.apache.org/licenses/LICENSE-2.0\r\n[2]:https://github.com/davide-maestroni/robo-fashion/blob/master/lib/src/main/java/com/bmd/android/collection/filter/Filters.java\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
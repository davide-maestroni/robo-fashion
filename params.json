{"name":"Robo-fashion","tagline":"Easy iteration and manipulation of Android sparse collections","body":"#robo-fashion\r\n\r\nThis library employs builder and fluent design patterns to enable easy iteration and manipulation of Android sparse collections.\r\n\r\n##Overview\r\n\r\nThe Android platform introduced a few collection classes based on the sparse array implementation. Although they bring improved performances and optimized memory usage to the classic Java collections world, they sometimes become awkward to use when implementing the most basic pieces of code. For example, good old iteration is not supported, so that, while all Java developers are by now used to the short and elegant syntax:\r\n\r\n```java\r\nfor (final Entry<Integer,MyClass> entry : map.entrySet()) {\r\n\r\n  doSomethingWithKey(entry.getKey());\r\n  doSomethingWithValue(entry.getValue());\r\n}\r\n```\r\n\r\nwhen employing Android sparse collections, you quickly end up in rewriting one time too often the same ugly code:\r\n\r\n```java\r\nfinal int size = collection.size();\r\n\r\nfor (int i = 0; i < size; ++i) {\r\n\r\n  doSomethingWithKey(collection.keyAt(i));\r\n  doSomethingWithValue(collection.valueAt(i));\r\n}\r\n```\r\n\r\nThe autocomplete feature of most Java or Android IDEs is not of much help here...\r\n\r\nThe purpose of this library is to provide an easy way to iterate through the elements of the Android sparse collections and manipulate them in the while.\r\n\r\n##Documentation\r\n\r\nComplete [Javadocs][4] with insights and examples are available.\r\n\r\nThe project contains an additional sample module showing how to implement an enhanced version of a [SimpleArrayMap][7] supporting parcelable serialization, iteration and proper *equals()* implementation (see issue [68406][6]).\r\n\r\n##Performance\r\n\r\nThe iterator implementation is generally faster than the correspondent Java map collection, but, in any case, slower than directly accessing the Android collection object. In fact, there could be nothing faster than reading an element from a primitive array by its index. It is also true that the sparse collections were designed for best performances when holding a relative small number of elements. In such cases iteration is for sure not the bottleneck, so you'd better have flexibility and readability than speed.\r\n\r\n##Version\r\n\r\n1.0\r\n\r\n##License\r\n\r\n[The Apache Software License, Version 2.0][2]\r\n\r\n**It's open! Feel free to contribute!!**\r\n\r\n[1]:http://developer.android.com/sdk/terms.html\r\n[2]:http://www.apache.org/licenses/LICENSE-2.0\r\n[3]:https://github.com/davide-maestroni/robo-fashion/blob/master/lib/src/main/java/com/bmd/android/collection/filter/Filters.java\r\n[4]:http://davide-maestroni.github.io/robo-fashion/javadoc/\r\n[5]:http://square.github.io/fest-android/\r\n[6]:https://code.google.com/p/android/issues/detail?id=68406\r\n[7]:http://developer.android.com/reference/android/support/v4/util/SimpleArrayMap.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}